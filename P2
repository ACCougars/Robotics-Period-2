#include <kipr/botball.h>
//********************************************************************************************************************//
		                                 //description below, next to the functions;\\
//********************************************************************************************************************//

void straight(int distance);
void straighttape(int distance); 
void turnleft (int angle);
void turnright (int angle);
void changeservo(int port, int servoPosition);
void rest(double sec);
void grabpom();
void gograbpom(int distance);
void grabcontainer();
void yellowcubictask(int times);
void middletask(int times);

int claw = 0, arm = 2;
int armBack = 2047, armGround = 70;
int clawOpenContainer = 800, clawCloseContainer = 1350, armBackContainer = 1900, armContainerFloor = 150;
int clawOpenPom = 900, clawClosePom = 1600;
int armYellowTask = 120, clawTotalClose = 2047;

int main()
{
    //left wheel = 1, right wheel = 0

    enable_servos();
    
    changeservo (arm, armGround);
    changeservo (claw, clawOpenContainer);
    straight(2000);    
    turnleft(45);
    straight(6500);
    changeservo(claw , clawCloseContainer);
    straight(-5400);

    rest(0.5); // take a break

    changeservo (claw, clawOpenPom);
    changeservo( arm, armBack);
    turnleft(10);
    straight(2650);
    turnleft(100);
    straight(50);
    // checked
    
    grabpom();
    turnright(30);
    straight(500);
    turnleft(90);
    gograbpom(1000);
    gograbpom(1200);
    gograbpom(1200);
    gograbpom(1000);
    turnleft(90);
    straight(7500);
    turnleft(90);
    straight(14000);
    turnleft(180);
    straight(14000);
    yellowcubictask(5);
    
    return 0;
}

void straight(int distance) // robot walk in a straight line in white area
{
    cmpc(1);
    int a = gmpc(1);
    if( distance >= 0)
    {
        while( a < distance )
        {
            motor(1, 90);
            motor(0, 100);
            a = gmpc(1);
        }
    }
    else if( distance < 0)
    {
        while( a > distance)
        {
            motor(1, -94.92);
            motor(0,-100);
            a = gmpc(1);
        }
    }
}
void straighttape(int distance) // robot walk in a straight line on the blue tape
{
    cmpc(1);
    int a = gmpc(1);
    if(distance >= 0)
    {
        while( a < distance )
        {
            motor(1, 85);
            motor(0, 100);
            a = gmpc(1);
        }
    }
    else if(distance < 0)
    {
        while( a > distance )
        {
            motor(1, -85);
            motor(0, -100);
            a = gmpc(1);
        }
    }
}
void turnleft (int angle)
{
    cmpc(1);
    int a = gmpc(1);
    while( a > -1800 / 180 * angle)
    {
        motor(1, -50);
        motor(0, 48.5);
        a = gmpc(1);
    }
}
void turnright (int angle)
{
    cmpc(1);
    int a = gmpc(1);
    while( a < 1800 / 180 * angle)
    {
        motor(1, 50);
        motor(0, -48.5);
        a = gmpc(1);
    }
}

void changeservo(int port, int servoPosition) // make the servo move more smoothly
{
    int a = get_servo_position(port);
    if ( a < servoPosition)
    {
        while( a < servoPosition)
        {
            set_servo_position(port, a);
            msleep(5);
            a += 5;
        }
    }
    else if ( a > servoPosition)
    {
        while( a > servoPosition)
        {
            set_servo_position(port, a);
            msleep(5);
            a -= 5;
        }
    }
}
void rest(double sec) // robot take a break
{
    motor(0, 0);
    motor(1, 0);
    msleep( 1000 * sec);
}
void grabpom() // to grab the pom
{
    changeservo( claw, clawOpenPom);
    changeservo( arm, armContainerFloor);
    changeservo (claw, clawClosePom);
    changeservo (arm, armBack);
    // compress
}
void gograbpom(int distance) // to grab the pom, and then go to the next position
{
     changeservo (claw, clawOpenPom);
     changeservo (arm, armContainerFloor);
     changeservo (claw, clawClosePom);
     changeservo (arm, armBack);
     changeservo (claw, clawOpenPom);
     // compress
     straighttape(distance);
}
void grabcontainer()
{
    changeservo( claw, clawOpenContainer);
    changeservo( arm, armBackContainer);
    changeservo( claw, clawCloseContainer);
    changeservo( arm, armBackContainer);
    changeservo( claw, clawOpenContainer);
}
void yellowcubictask(int times) // to do the yellow cubics task
{
    int a = 0;
    while( a < times)
    {
        changeservo( arm, armYellowTask);
        changeservo( claw, clawTotalClose);
        turnleft(50);
        changeservo( arm, armBack);
        turnright(50);
        a ++;
    }
}
